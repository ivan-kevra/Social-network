{"version":3,"file":"static/js/805.894edb09.chunk.js","mappings":"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","sources":["webpack://social-network/./src/components/common/FormsControls/style.module.css?c504","components/common/FormsControls/FormControls.tsx","webpack://social-network/./src/components/profile/Profile.module.css?5246","components/profile/ProfileInfo/profileStatus/ProfileStatusWithHooks.tsx","components/profile/ProfileInfo/ProfileInfo.tsx","components/profile/MyPosts/MyPosts.module.css","webpack://social-network/./src/components/profile/MyPosts/Post/Post.module.css?3dca","components/profile/MyPosts/Post/Post.tsx","components/profile/MyPosts/MyPosts.tsx","components/profile/MyPosts/MyPostsContainer.tsx","components/profile/Profile.tsx","components/profile/ProfileContainer.tsx","hoc/WithAuthRedirect.tsx","utils/validators/validators.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"style_formControl__pl+pQ\",\"error\":\"style_error__Lstpm\"};","import style from './style.module.css'\r\nimport {FocusEventHandler} from \"react\";\r\n\r\ntype FormControlPropsType = {\r\n    onBlur: FocusEventHandler<HTMLTextAreaElement> | FocusEventHandler<HTMLInputElement>\r\n    item: string | undefined\r\n    children: JSX.Element\r\n}\r\n\r\nconst FormControl = ({item, onBlur, children}: FormControlPropsType) => {\r\n    const hasError = item && onBlur\r\n    return (\r\n        <div className={`${style.formControl} ${hasError ? style.error : ''}`}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{item}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\ntype TextAreaPropsType = {\r\n    onBlur: FocusEventHandler<HTMLTextAreaElement>\r\n    item: string | undefined\r\n}\r\nexport const Textarea = ({item, onBlur, ...props}: TextAreaPropsType) => {\r\n    return <FormControl item={item} onBlur={onBlur}>\r\n        <textarea {...props} onBlur={onBlur}/>\r\n    </FormControl>\r\n}\r\n\r\ntype InputPropsType = {\r\n    onBlur: FocusEventHandler<HTMLInputElement>\r\n    item: string | undefined\r\n}\r\nexport const Input = (props: InputPropsType) => {\r\n    return <FormControl item={props.item} onBlur={props.onBlur}>\r\n        <input {...props} onBlur={props.onBlur}/>\r\n    </FormControl>\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"content\":\"Profile_content__SbT+x\"};","import React, {ChangeEvent, useEffect, useState} from 'react';\r\n\r\ntype ProfileStatusWithHooksPropsType = {\r\n    status: string\r\n    updateStatus: (status: string) => void\r\n}\r\nexport const ProfileStatusWithHooks = (props: ProfileStatusWithHooksPropsType) => {\r\n    const [editMode, setEditMode] = useState(false)\r\n    const [status, setStatus] = useState(props.status)\r\n\r\n    useEffect(() => {\r\n        setStatus(props.status)\r\n    }, [props.status])\r\n    const activateEditMode = () => {\r\n        setEditMode(true)\r\n    }\r\n    const activateViewMode = () => {\r\n        setEditMode(false)\r\n        props.updateStatus(status)\r\n    }\r\n    const changeStatusHandler = (event: ChangeEvent<HTMLInputElement>) => {\r\n        setStatus(event.currentTarget.value)\r\n    }\r\n    return (\r\n        <div>\r\n            {editMode\r\n                ? <input onBlur={activateViewMode} value={status} autoFocus onChange={changeStatusHandler}/>\r\n                : <span onDoubleClick={activateEditMode}>{status ? status : 'no status'}</span>\r\n            }\r\n        </div>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport {ProfileInfoType} from \"../../../redux/profile-reducer\";\r\nimport {Preloader} from '../../common/preloader/Preloader';\r\nimport {ProfileStatusWithHooks} from \"./profileStatus/ProfileStatusWithHooks\";\r\n\r\n\r\ntype ProfileInfoPropsType = {\r\n    profileInfo: ProfileInfoType | null\r\n    status: string\r\n    updateStatus: () => void\r\n}\r\n\r\nexport const ProfileInfo = ({profileInfo, status, updateStatus}: ProfileInfoPropsType) => {\r\n    if (!profileInfo) {\r\n        return <Preloader/>\r\n    }\r\n    return (\r\n        <div>\r\n            <img src={profileInfo.photos.large} alt='photo'/>\r\n            <span> {profileInfo.fullName}</span>\r\n            <span> {profileInfo.lookingForAJobDescription}</span>\r\n            <ProfileStatusWithHooks status={status} updateStatus={updateStatus}/>\r\n        </div>\r\n    );\r\n\r\n\r\n};\r\n","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {\"post\":\"Post_post__b0D+1\"};","import React from 'react';\r\nimport style from \"./Post.module.css\";\r\n\r\ntype PostPropsType = {\r\n    message: string\r\n    likesCount: number\r\n}\r\n\r\nexport const Post = (props: PostPropsType) => {\r\n    return (\r\n        <div className={style.post}>\r\n            <img alt='photo'\r\n                 src='https://www.shutterstock.com/shutterstock/photos/1606423033/display_1500/stock-vector-portrait-of-a-happy-man-avatar-of-a-guy-for-social-network-colorful-portrait-student-of-the-1606423033.jpg'/>\r\n            <div>\r\n                {props.message}\r\n            </div>\r\n            <div>\r\n                {props.likesCount}\r\n            </div>\r\n        </div>\r\n\r\n    );\r\n};\r\n\r\n","import React from 'react';\r\nimport style from \"./MyPosts.module.css\";\r\nimport {Post} from \"./Post/Post\";\r\nimport {PostType} from \"../../../redux/profile-reducer\";\r\nimport {useFormik} from \"formik\";\r\nimport Button from \"@mui/material/Button\";\r\nimport {maxLengthPostValidator} from '../../../utils/validators/validators';\r\nimport {Textarea} from \"../../common/FormsControls/FormControls\";\r\n\r\n\r\ntype PostsPropsType = {\r\n    posts: PostType[]\r\n    addPost: (post: string) => void\r\n}\r\n\r\nexport const MyPosts: React.FC<PostsPropsType> = React.memo((props) => {\r\n\r\n    let postsElements = [...props.posts].reverse().map((post) => {\r\n        return <Post key={post.id} message={post.postMessage} likesCount={post.likesCount}/>\r\n    })\r\n    const addPostHandler = (value: { post: string }) => {\r\n        props.addPost(value.post)\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            My posts\r\n            <AddPostForm addPostHandler={addPostHandler}/>\r\n            <div> New Post</div>\r\n            <div className={style.posts}>{postsElements}</div>\r\n        </div>\r\n    );\r\n})\r\n\r\n\r\ntype AddPostFormPropsType = {\r\n    addPostHandler: (value: { post: string }) => void\r\n}\r\nconst AddPostForm = (props: AddPostFormPropsType) => {\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            post: ''\r\n        },\r\n        validate: (values) => maxLengthPostValidator(10, values),\r\n        onSubmit: values => {\r\n            console.log(values)\r\n            props.addPostHandler(values)\r\n        },\r\n    })\r\n    return <form onSubmit={formik.handleSubmit}>\r\n        <Textarea {...formik.getFieldProps('post')} onBlur={formik.handleBlur}\r\n                  item={formik.errors.post}/>\r\n        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n            Send\r\n        </Button>\r\n    </form>\r\n}\r\n\r\n","import React from 'react';\r\nimport {addPost} from \"../../../redux/profile-reducer\";\r\nimport {MyPosts} from \"./MyPosts\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../../redux/store\";\r\n\r\n\r\nconst mapStateToProps = (state: AppRootStateType) => {\r\n    return {\r\n        posts: state.profilePage.posts,\r\n    }\r\n}\r\nconst mapDispatchToProps = (dispatch: any) => {\r\n    return {\r\n        addPost: (newPost: string) => {\r\n            dispatch(addPost(newPost))\r\n        },\r\n\r\n    }\r\n}\r\n\r\nexport const MyPostsContainer = connect(mapStateToProps, mapDispatchToProps)(MyPosts)\r\n","import React from \"react\";\r\nimport style from './Profile.module.css'\r\nimport {ProfileInfo} from \"./ProfileInfo/ProfileInfo\";\r\nimport {MyPostsContainer} from \"./MyPosts/MyPostsContainer\"\r\nimport {ProfileInfoType} from \"../../redux/profile-reducer\";\r\n\r\ntype ProfilePropsType = {\r\n    profileInfo: ProfileInfoType | null\r\n    status: string\r\n    updateStatus: () => void\r\n}\r\n\r\nexport const Profile = (props: ProfilePropsType) => {\r\n    return (\r\n        <div className={style.content}>\r\n            <ProfileInfo profileInfo={props.profileInfo} status={props.status} updateStatus={props.updateStatus}/>\r\n            <MyPostsContainer/>\r\n        </div>\r\n    )\r\n}","import React from \"react\";\r\nimport {Profile} from \"./Profile\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../redux/store\";\r\nimport {getStatus, getUserProfile, updateStatus} from \"../../redux/profile-reducer\";\r\nimport {useLocation, useNavigate, useParams} from \"react-router-dom\";\r\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nclass ProfileContainer extends React.Component<any, any> {\r\n\r\n    componentDidMount() {\r\n        let userId = this.props.router.params.userId\r\n        if (!userId) {\r\n            userId = this.props.authorizedUserId\r\n            if (!userId) {\r\n                this.props.history.push(\"/login\")\r\n            }\r\n        }\r\n        this.props.getUserProfile(userId)\r\n        this.props.getStatus(userId)\r\n\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <Profile {...this.props} profileInfo={this.props.profile} status={this.props.status}\r\n                     updateStatus={this.props.updateStatus}/>\r\n        )\r\n    }\r\n}\r\n\r\nfunction withRouter(Component: any) {\r\n    function ComponentWithRouterProp(props: any) {\r\n        let location = useLocation();\r\n        let navigate = useNavigate();\r\n        let params = useParams();\r\n        return (\r\n            <Component\r\n                {...props}\r\n                router={{location, navigate, params}}\r\n            />\r\n        );\r\n    }\r\n\r\n    return ComponentWithRouterProp;\r\n}\r\n\r\nlet mapStateToProps = (state: AppRootStateType) => ({\r\n    profile: state.profilePage.profileInfo,\r\n    status: state.profilePage.status,\r\n    authorizedUserId: state.app.id,\r\n    isAuth: state.app.isAuth\r\n})\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {getUserProfile, getStatus, updateStatus}),\r\n    withRouter,\r\n    WithAuthRedirect\r\n)(ProfileContainer)\r\n\r\n","import {Navigate} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {AppRootStateType} from \"../redux/store\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state: AppRootStateType) => ({\r\n    isAuth: state.app.isAuth\r\n})\r\n\r\nexport const WithAuthRedirect = (Component: any) => {\r\n    class RedirectComponent extends React.Component<any, any> {\r\n        render() {\r\n            if (!this.props.isAuth) return <Navigate to={'/login'}/>\r\n\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedRedirectComponent\r\n}","import {FormikErrorType} from \"../../login/Login\"\r\n\r\n\r\nexport const loginValidator = (values: FormikErrorType) => {\r\n    const errors: FormikErrorType = {}\r\n    if (!values.email) {\r\n        errors.email = 'Required'\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = 'Invalid email address'\r\n    }\r\n    if (!values.password) {\r\n        errors.password = 'Required'\r\n    } else if (values.password.length < 3) {\r\n        errors.password = 'Password too short'\r\n    }\r\n    return errors\r\n}\r\n\r\nexport const maxLengthPostValidator = (maxLength: number, values: PostErrorType) => {\r\n    const errors: PostErrorType = {}\r\n    if (!values.post) errors.post = 'Required'\r\n    else if (values.post.length > maxLength) errors.post = `Max length is ${maxLength} symbols`\r\n    return errors\r\n}\r\n\r\nexport type PostErrorType = {\r\n    post?: string | undefined\r\n}\r\n\r\n\r\nexport const maxLengthMessageValidator = (maxLength: number, values: MessageErrorType) => {\r\n    const errors: MessageErrorType = {}\r\n    if (!values.message) errors.message = 'Required'\r\n    else if (values.message.length > maxLength) errors.message = `Max length is ${maxLength} symbols`\r\n    return errors\r\n}\r\nexport type MessageErrorType = {\r\n    message?: string | undefined\r\n}\r\n"],"names":["FormControl","item","onBlur","children","hasError","className","style","Textarea","props","Input","ProfileStatusWithHooks","useState","editMode","setEditMode","status","setStatus","useEffect","updateStatus","value","autoFocus","onChange","event","currentTarget","onDoubleClick","ProfileInfo","profileInfo","src","photos","large","alt","fullName","lookingForAJobDescription","Preloader","Post","message","likesCount","MyPosts","React","postsElements","posts","reverse","map","post","postMessage","id","AddPostForm","addPostHandler","addPost","formik","useFormik","initialValues","validate","values","maxLengthPostValidator","onSubmit","console","log","handleSubmit","getFieldProps","handleBlur","errors","Button","type","variant","color","MyPostsContainer","connect","state","profilePage","dispatch","newPost","Profile","ProfileContainer","userId","this","router","params","authorizedUserId","history","push","getUserProfile","getStatus","profile","compose","app","isAuth","Component","location","useLocation","navigate","useNavigate","useParams","WithAuthRedirect","mapStateToPropsForRedirect","RedirectComponent","to","loginValidator","email","test","password","length","maxLength","maxLengthMessageValidator"],"sourceRoot":""}