{"version":3,"file":"static/js/527.6dca3139.chunk.js","mappings":"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","sources":["webpack://social-network/./src/components/Dialogs/Dialogs.module.css?1b2e","webpack://social-network/./src/components/Dialogs/dialogItem/DialogItem.module.css?c3bb","components/Dialogs/dialogItem/DialogItem.tsx","webpack://social-network/./src/components/Dialogs/message/Message.module.css?e4b7","components/Dialogs/message/Message.tsx","components/Dialogs/Dialogs.tsx","components/Dialogs/DialogsContainer.tsx","webpack://social-network/./src/components/common/FormsControls/style.module.css?c504","components/common/FormsControls/FormControls.tsx","hoc/WithAuthRedirect.tsx","utils/validators/validators.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__lyqg4\",\"messages\":\"Dialogs_messages__Zo3u3\"};","// extracted by mini-css-extract-plugin\nexport default {\"dialogsItems\":\"DialogItem_dialogsItems__iTi8y\",\"active\":\"DialogItem_active__dJp8t\"};","import style from \"./DialogItem.module.css\";\r\nimport {NavLink} from \"react-router-dom\";\r\nimport React from \"react\";\r\n\r\ntype DialogItemPropsType = {\r\n    name: string\r\n    id: number\r\n    avatar: string\r\n}\r\n\r\nexport const DialogItem = (props: DialogItemPropsType) => {\r\n    let path = `${/dialogs/}${props.id}`\r\n    return (\r\n        <div className={`${style.dialog} ${style.active}`}>\r\n            <img src={props.avatar}/>\r\n            <NavLink to={path}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}","// extracted by mini-css-extract-plugin\nexport default {\"message\":\"Message_message__xbFOe\",\"message2\":\"Message_message2__Ntfvo\",\"userId\":\"Message_userId__bQO0D\"};","import style from \"./Message.module.css\";\r\nimport React from \"react\";\r\n\r\ntype MessagePropsType = {\r\n    id: number\r\n    message: string\r\n    userId: number\r\n    avatar: string\r\n}\r\n\r\nexport const Message = (props: MessagePropsType) => {\r\n    return (\r\n        <div className={props.userId === 1 ? style.message2 : style.message}>\r\n            <img src={props.avatar}/>\r\n            {props.message}\r\n        </div>\r\n    )\r\n}","import React from 'react';\r\nimport style from './Dialogs.module.css'\r\nimport {DialogItem} from \"./dialogItem/DialogItem\";\r\nimport {Message} from \"./message/Message\";\r\nimport {InitialStateType} from \"../../redux/dialogs-reducer\";\r\nimport {Navigate} from \"react-router-dom\";\r\nimport {useFormik} from \"formik\";\r\nimport Button from \"@mui/material/Button\";\r\nimport {maxLengthMessageValidator, MessageErrorType} from \"../../utils/validators/validators\";\r\nimport {Textarea} from \"../common/FormsControls/FormControls\";\r\n\r\n\r\ntype dialogsStatePropsType = {\r\n    addMessage: (newMessage: string | undefined) => void\r\n    updateNewMessageText: (newMessageText: string) => void\r\n    dialogsPage: InitialStateType\r\n    isAuth: boolean\r\n}\r\n\r\nexport const Dialogs: React.FC<dialogsStatePropsType> = (props) => {\r\n\r\n    let state = props.dialogsPage\r\n    const dialogs = state.dialogs.map((dialog) => {\r\n        return (\r\n            <DialogItem key={dialog.id} id={dialog.id} name={dialog.name} avatar={dialog.avatar}/>\r\n        )\r\n    })\r\n    const messages = state.messages.map((message) => {\r\n        return (\r\n            <Message key={message.id}\r\n                     id={message.id}\r\n                     message={message.message}\r\n                     userId={message.userId}\r\n                     avatar={message.avatar}/>\r\n        )\r\n    })\r\n\r\n    const addMessageHandler = (message: string | undefined) => {\r\n        props.addMessage(message)\r\n    }\r\n    if (!props.isAuth) return <Navigate to={'/login'}/>\r\n\r\n    return (\r\n        <div className={style.dialogs}>\r\n            <div className={style.dialogsItems}>{dialogs}</div>\r\n            <div className={style.messages}>{messages}</div>\r\n            <AddMessageForm addMessageHandler={addMessageHandler}/>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\ntype AddMessageFormPropsType = {\r\n    addMessageHandler: (message: string | undefined) => void\r\n}\r\n\r\nconst AddMessageForm = (props: AddMessageFormPropsType) => {\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            message: ''\r\n        },\r\n        validate: (values: MessageErrorType) => maxLengthMessageValidator(10, values),\r\n        onSubmit: values => {\r\n            console.log(values.message)\r\n            props.addMessageHandler(values.message)\r\n            // dispatch(loginTC(values))\r\n        },\r\n    })\r\n    return <form onSubmit={formik.handleSubmit}>\r\n        <Textarea item={formik.errors.message}\r\n                  {...formik.getFieldProps('message')}\r\n                  onBlur={formik.handleBlur}/>\r\n        <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n            Send\r\n        </Button>\r\n    </form>\r\n}\r\n","import React from 'react';\r\nimport {addMessageAC} from \"../../redux/dialogs-reducer\";\r\nimport {Dialogs} from \"./Dialogs\";\r\nimport {connect} from \"react-redux\";\r\nimport {AppRootStateType} from \"../../redux/store\";\r\nimport {WithAuthRedirect} from \"../../hoc/WithAuthRedirect\";\r\nimport {compose} from \"redux\";\r\n\r\n\r\nlet mapStateToProps = (state: AppRootStateType) => {\r\n    return {\r\n        dialogsPage: state.dialogsPage,\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: any) => {\r\n    return {\r\n        addMessage: (newMessage: string) => dispatch(addMessageAC(newMessage)),\r\n    }\r\n}\r\n\r\n\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, mapDispatchToProps),\r\n    WithAuthRedirect\r\n)(Dialogs)\r\n","// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"style_formControl__pl+pQ\",\"error\":\"style_error__Lstpm\"};","import style from './style.module.css'\r\nimport {FocusEventHandler} from \"react\";\r\n\r\ntype FormControlPropsType = {\r\n    onBlur: FocusEventHandler<HTMLTextAreaElement> | FocusEventHandler<HTMLInputElement>\r\n    item: string | undefined\r\n    children: JSX.Element\r\n}\r\n\r\nconst FormControl = ({item, onBlur, children}: FormControlPropsType) => {\r\n    const hasError = item && onBlur\r\n    return (\r\n        <div className={`${style.formControl} ${hasError ? style.error : ''}`}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{item}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\ntype TextAreaPropsType = {\r\n    onBlur: FocusEventHandler<HTMLTextAreaElement>\r\n    item: string | undefined\r\n}\r\nexport const Textarea = ({item, onBlur, ...props}: TextAreaPropsType) => {\r\n    return <FormControl item={item} onBlur={onBlur}>\r\n        <textarea {...props} onBlur={onBlur}/>\r\n    </FormControl>\r\n}\r\n\r\ntype InputPropsType = {\r\n    onBlur: FocusEventHandler<HTMLInputElement>\r\n    item: string | undefined\r\n}\r\nexport const Input = (props: InputPropsType) => {\r\n    return <FormControl item={props.item} onBlur={props.onBlur}>\r\n        <input {...props} onBlur={props.onBlur}/>\r\n    </FormControl>\r\n}\r\n\r\n","import {Navigate} from \"react-router-dom\";\r\nimport React from \"react\";\r\nimport {AppRootStateType} from \"../redux/store\";\r\nimport {connect} from \"react-redux\";\r\n\r\nlet mapStateToPropsForRedirect = (state: AppRootStateType) => ({\r\n    isAuth: state.app.isAuth\r\n})\r\n\r\nexport const WithAuthRedirect = (Component: any) => {\r\n    class RedirectComponent extends React.Component<any, any> {\r\n        render() {\r\n            if (!this.props.isAuth) return <Navigate to={'/login'}/>\r\n\r\n            return <Component {...this.props}/>\r\n        }\r\n    }\r\n\r\n    let ConnectedRedirectComponent = connect(mapStateToPropsForRedirect)(RedirectComponent)\r\n\r\n    return ConnectedRedirectComponent\r\n}","import {FormikErrorType} from \"../../login/Login\"\r\n\r\n\r\nexport const loginValidator = (values: FormikErrorType) => {\r\n    const errors: FormikErrorType = {}\r\n    if (!values.email) {\r\n        errors.email = 'Required'\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = 'Invalid email address'\r\n    }\r\n    if (!values.password) {\r\n        errors.password = 'Required'\r\n    } else if (values.password.length < 3) {\r\n        errors.password = 'Password too short'\r\n    }\r\n    return errors\r\n}\r\n\r\nexport const maxLengthPostValidator = (maxLength: number, values: PostErrorType) => {\r\n    const errors: PostErrorType = {}\r\n    if (!values.post) errors.post = 'Required'\r\n    else if (values.post.length > maxLength) errors.post = `Max length is ${maxLength} symbols`\r\n    return errors\r\n}\r\n\r\nexport type PostErrorType = {\r\n    post?: string | undefined\r\n}\r\n\r\n\r\nexport const maxLengthMessageValidator = (maxLength: number, values: MessageErrorType) => {\r\n    const errors: MessageErrorType = {}\r\n    if (!values.message) errors.message = 'Required'\r\n    else if (values.message.length > maxLength) errors.message = `Max length is ${maxLength} symbols`\r\n    return errors\r\n}\r\nexport type MessageErrorType = {\r\n    message?: string | undefined\r\n}\r\n"],"names":["DialogItem","props","path","id","className","style","src","avatar","to","name","Message","userId","message","AddMessageForm","formik","useFormik","initialValues","validate","values","maxLengthMessageValidator","onSubmit","console","log","addMessageHandler","handleSubmit","item","errors","getFieldProps","onBlur","handleBlur","Button","type","variant","color","compose","connect","state","dialogsPage","dispatch","addMessage","newMessage","addMessageAC","WithAuthRedirect","dialogs","map","dialog","messages","isAuth","FormControl","children","hasError","Textarea","Input","mapStateToPropsForRedirect","app","Component","RedirectComponent","this","React","loginValidator","email","test","password","length","maxLengthPostValidator","maxLength","post"],"sourceRoot":""}