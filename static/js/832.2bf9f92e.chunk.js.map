{"version":3,"file":"static/js/832.2bf9f92e.chunk.js","mappings":"oMACA,EAA8B,2BAA9B,EAAiE,qB,6BCQ3DA,EAAc,SAAH,GAAwD,IAAnDC,EAAI,EAAJA,KAAMC,EAAM,EAANA,OAAQC,EAAQ,EAARA,SAC1BC,EAAWH,GAAQC,EACzB,OACI,iBAAKG,UAAS,UAAKC,EAAiB,YAAIF,EAAWE,EAAc,IAAK,WAClE,yBACKH,IAEJC,IAAY,0BAAOH,MAGhC,EAMaM,EAAW,SAAH,GAAqD,IAAhDN,EAAI,EAAJA,KAAMC,EAAM,EAANA,OAAWM,GAAK,YAC5C,OAAO,SAACR,EAAW,CAACC,KAAMA,EAAMC,OAAQA,EAAO,UAC3C,uCAAcM,GAAK,IAAEN,OAAQA,MAErC,EAMaO,EAAQ,SAACD,GAClB,OAAO,SAACR,EAAW,CAACC,KAAMO,EAAMP,KAAMC,OAAQM,EAAMN,OAAO,UACvD,oCAAWM,GAAK,IAAEN,OAAQM,EAAMN,WAExC,C,uLC6BA,UA/Cc,WAEV,IAAMQ,GAAWC,EAAAA,EAAAA,KAEXC,GAASC,EAAAA,EAAAA,KAAuC,SAAAC,GAAK,OAAIA,EAAMC,IAAIH,MAAM,IAEzEI,GAASC,EAAAA,EAAAA,IAAU,CACrBC,cAAe,CACXC,MAAO,GACPC,SAAU,GACVC,YAAY,EACZC,QAAS,IAEbC,SAAU,SAACC,GAAuB,OAAKC,EAAAA,EAAAA,IAAeD,EAAO,EAC7DE,SAAU,SAACF,EAAO,GAAsB,IAApBG,EAAa,EAAbA,cAChBC,QAAQC,IAAIL,GACZd,GAASoB,EAAAA,EAAAA,IAAQN,EAAQG,GAC7B,IAGJ,OAAIf,GACO,SAAC,KAAQ,CAACmB,GAAI,cAGlB,iBAAML,SAAUV,EAAOgB,aAAa,UACvC,SAAC,IAAW,WACR,UAAC,IAAS,YACN,SAAC,EAAAC,GAAK,kBAAKjB,EAAOkB,cAAc,UAAQ,IACjChC,OAAQc,EAAOmB,WAAYlC,KAAMe,EAAOoB,OAAOjB,UACtD,SAAC,EAAAc,GAAK,kBAAKjB,EAAOkB,cAAc,aAAW,IACpChC,OAAQc,EAAOmB,WAAYlC,KAAMe,EAAOoB,OAAOhB,aACtD,SAAC,IAAgB,CAACiB,MAAO,cACPC,SAAS,SAAC,KAAQ,kBACVtB,EAAOkB,cAAc,eAAa,IACtCK,SAAUvB,EAAOwB,aACjBC,QAASzB,EAAOQ,OAAOH,iBAE7C,SAAC,IAAM,CAACqB,KAAM,SAAUC,QAAS,YAAaC,MAAO,UAAU,SAAC,WAGhE,yBACK5B,EAAOQ,OAAOF,SAAU,0BAAON,EAAOQ,OAAOF,UAAkB,aAKpF,C,wGChEO,IAAMG,EAAiB,SAACD,GAC3B,IAAMY,EAA0B,CAAC,EAWjC,OAVKZ,EAAOL,MAEA,4CAA4C0B,KAAKrB,EAAOL,SAChEiB,EAAOjB,MAAQ,yBAFfiB,EAAOjB,MAAQ,WAIdK,EAAOJ,SAEDI,EAAOJ,SAAS0B,OAAS,IAChCV,EAAOhB,SAAW,sBAFlBgB,EAAOhB,SAAW,WAIfgB,CACX,EAEaW,EAAyB,SAACC,EAAmBxB,GACtD,IAAMY,EAAwB,CAAC,EAG/B,OAFKZ,EAAOyB,KACHzB,EAAOyB,KAAKH,OAASE,IAAWZ,EAAOa,KAAI,wBAAoBD,EAAS,aAD/DZ,EAAOa,KAAO,WAEzBb,CACX,EAOac,EAA4B,SAACF,EAAmBxB,GACzD,IAAMY,EAA2B,CAAC,EAGlC,OAFKZ,EAAO2B,QACH3B,EAAO2B,QAAQL,OAASE,IAAWZ,EAAOe,QAAO,wBAAoBH,EAAS,aADlEZ,EAAOe,QAAU,WAE/Bf,CACX,C","sources":["webpack://social-network/./src/components/common/FormsControls/style.module.css?c504","components/common/FormsControls/FormControls.tsx","login/Login.tsx","utils/validators/validators.ts"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"formControl\":\"style_formControl__pl+pQ\",\"error\":\"style_error__Lstpm\"};","import style from './style.module.css'\r\nimport {FocusEventHandler} from \"react\";\r\n\r\ntype FormControlPropsType = {\r\n    onBlur: FocusEventHandler<HTMLTextAreaElement> | FocusEventHandler<HTMLInputElement>\r\n    item: string | undefined\r\n    children: JSX.Element\r\n}\r\n\r\nconst FormControl = ({item, onBlur, children}: FormControlPropsType) => {\r\n    const hasError = item && onBlur\r\n    return (\r\n        <div className={`${style.formControl} ${hasError ? style.error : ''}`}>\r\n            <div>\r\n                {children}\r\n            </div>\r\n            {hasError && <span>{item}</span>}\r\n        </div>\r\n    )\r\n}\r\n\r\ntype TextAreaPropsType = {\r\n    onBlur: FocusEventHandler<HTMLTextAreaElement>\r\n    item: string | undefined\r\n}\r\nexport const Textarea = ({item, onBlur, ...props}: TextAreaPropsType) => {\r\n    return <FormControl item={item} onBlur={onBlur}>\r\n        <textarea {...props} onBlur={onBlur}/>\r\n    </FormControl>\r\n}\r\n\r\ntype InputPropsType = {\r\n    onBlur: FocusEventHandler<HTMLInputElement>\r\n    item: string | undefined\r\n}\r\nexport const Input = (props: InputPropsType) => {\r\n    return <FormControl item={props.item} onBlur={props.onBlur}>\r\n        <input {...props} onBlur={props.onBlur}/>\r\n    </FormControl>\r\n}\r\n\r\n","import React from 'react'\r\nimport Checkbox from '@mui/material/Checkbox';\r\nimport FormControl from '@mui/material/FormControl';\r\nimport FormControlLabel from '@mui/material/FormControlLabel';\r\nimport FormGroup from '@mui/material/FormGroup';\r\nimport Button from '@mui/material/Button';\r\nimport {useFormik} from \"formik\";\r\nimport {useSelector} from \"react-redux\";\r\nimport {AppRootStateType, useAppDispatch} from \"../redux/store\";\r\nimport {loginTC} from \"../redux/app-reducer\";\r\nimport {loginValidator} from '../utils/validators/validators';\r\nimport {Input} from \"../components/common/FormsControls/FormControls\";\r\nimport {Navigate} from \"react-router-dom\";\r\n\r\n\r\nexport type FormikErrorType = {\r\n    email?: string\r\n    password?: string\r\n    rememberMe?: boolean\r\n}\r\n\r\nconst Login = () => {\r\n\r\n    const dispatch = useAppDispatch()\r\n\r\n    const isAuth = useSelector<AppRootStateType, boolean>(state => state.app.isAuth)\r\n\r\n    const formik = useFormik({\r\n        initialValues: {\r\n            email: '',\r\n            password: '',\r\n            rememberMe: false,\r\n            general: ''\r\n        },\r\n        validate: (values: FormikErrorType) => loginValidator(values),\r\n        onSubmit: (values, {setFieldValue}) => {\r\n            console.log(values)\r\n            dispatch(loginTC(values, setFieldValue))\r\n        },\r\n    })\r\n\r\n    if (isAuth) {\r\n        return <Navigate to={'/profile'}/>\r\n    }\r\n\r\n    return <form onSubmit={formik.handleSubmit}>\r\n        <FormControl>\r\n            <FormGroup>\r\n                <Input {...formik.getFieldProps('email')}\r\n                       onBlur={formik.handleBlur} item={formik.errors.email}/>\r\n                <Input {...formik.getFieldProps('password')}\r\n                       onBlur={formik.handleBlur} item={formik.errors.password}/>\r\n                <FormControlLabel label={'Remember me'}\r\n                                  control={<Checkbox\r\n                                      {...formik.getFieldProps('rememberMe')}\r\n                                      onChange={formik.handleChange}\r\n                                      checked={formik.values.rememberMe}\r\n                                  />}/>\r\n                <Button type={'submit'} variant={'contained'} color={'primary'}>\r\n                    Login\r\n                </Button>\r\n                <div>\r\n                    {formik.values.general ? <span>{formik.values.general}</span> : null}\r\n                </div>\r\n            </FormGroup>\r\n        </FormControl>\r\n    </form>\r\n}\r\nexport default Login;","import {FormikErrorType} from \"../../login/Login\"\r\n\r\n\r\nexport const loginValidator = (values: FormikErrorType) => {\r\n    const errors: FormikErrorType = {}\r\n    if (!values.email) {\r\n        errors.email = 'Required'\r\n    } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\r\n        errors.email = 'Invalid email address'\r\n    }\r\n    if (!values.password) {\r\n        errors.password = 'Required'\r\n    } else if (values.password.length < 3) {\r\n        errors.password = 'Password too short'\r\n    }\r\n    return errors\r\n}\r\n\r\nexport const maxLengthPostValidator = (maxLength: number, values: PostErrorType) => {\r\n    const errors: PostErrorType = {}\r\n    if (!values.post) errors.post = 'Required'\r\n    else if (values.post.length > maxLength) errors.post = `Max length is ${maxLength} symbols`\r\n    return errors\r\n}\r\n\r\nexport type PostErrorType = {\r\n    post?: string | undefined\r\n}\r\n\r\n\r\nexport const maxLengthMessageValidator = (maxLength: number, values: MessageErrorType) => {\r\n    const errors: MessageErrorType = {}\r\n    if (!values.message) errors.message = 'Required'\r\n    else if (values.message.length > maxLength) errors.message = `Max length is ${maxLength} symbols`\r\n    return errors\r\n}\r\nexport type MessageErrorType = {\r\n    message?: string | undefined\r\n}\r\n"],"names":["FormControl","item","onBlur","children","hasError","className","style","Textarea","props","Input","dispatch","useAppDispatch","isAuth","useSelector","state","app","formik","useFormik","initialValues","email","password","rememberMe","general","validate","values","loginValidator","onSubmit","setFieldValue","console","log","loginTC","to","handleSubmit","I","getFieldProps","handleBlur","errors","label","control","onChange","handleChange","checked","type","variant","color","test","length","maxLengthPostValidator","maxLength","post","maxLengthMessageValidator","message"],"sourceRoot":""}