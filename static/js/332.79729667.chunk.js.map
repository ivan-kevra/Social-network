{"version":3,"file":"static/js/332.79729667.chunk.js","mappings":"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","sources":["webpack://social-network/./src/components/common/paginator/Paginator.module.css?8828","components/common/paginator/Paginator.tsx","webpack://social-network/./src/components/users/Users.module.css?d05c","components/users/User.tsx","components/users/Users.tsx","redux/users-selectors.ts","components/users/UsersContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"selectedPage\":\"Paginator_selectedPage__rn-Qp\",\"pageNumber\":\"Paginator_pageNumber__jatUb\"};","import React, {useState} from 'react';\r\nimport style from \"./Paginator.module.css\"\r\n\r\ntype PaginatorPropsType = {\r\n    totalItemsCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    setCurrentPage: (page: number) => void\r\n}\r\n\r\nexport const Paginator: React.FC<PaginatorPropsType> = ({\r\n                                                            totalItemsCount, setCurrentPage, pageSize, currentPage,\r\n                                                        }) => {\r\n    let pagesCount = Math.ceil(totalItemsCount / pageSize)\r\n    let pages = []\r\n    for (let i = 1; i <= pagesCount; i++) {\r\n        pages.push(i)\r\n    }\r\n    let portionSize = 10\r\n\r\n    let portionCount = Math.ceil(pagesCount / portionSize)\r\n    let [portionNumber, setPortionNumber] = useState(1)\r\n    let leftPortionPageNumber = (portionNumber - 1) * portionSize + 1\r\n    let rightPortionPageNumber = portionNumber * portionSize\r\n\r\n    return <div>\r\n        {portionNumber > 1 &&\r\n            <button onClick={() => setPortionNumber(portionNumber - 1)}>PREV</button>}\r\n        {pages.filter((page: number) => page >= leftPortionPageNumber && page <= rightPortionPageNumber)\r\n            .map((page) => {\r\n                return <button key={page}\r\n                               className={currentPage === page ? style.selectedPage : ''}\r\n                               onClick={(event) => {\r\n                                   setCurrentPage(page)\r\n                               }}>\r\n                    {page}\r\n                </button>\r\n            })}\r\n        {portionCount > portionNumber &&\r\n            <button onClick={() => setPortionNumber(portionNumber + 1)}>NEXT</button>}\r\n    </div>\r\n}\r\n\r\n","// extracted by mini-css-extract-plugin\nexport default {\"users\":\"Users_users__cyz6V\"};","import React from 'react';\r\nimport style from \"./Users.module.css\";\r\nimport avatar from \"../../assets/images/avatar.jpg\";\r\nimport {UserType} from \"../../redux/users-reducer\";\r\nimport {NavLink} from \"react-router-dom\";\r\n\r\ntype UsersPropsType = {\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    followingInProgress: Array<number>\r\n    user: UserType\r\n}\r\n\r\nexport const User: React.FC<UsersPropsType> = ({\r\n                                                   user,\r\n                                                   followingInProgress,\r\n                                                   follow,\r\n                                                   unfollow,\r\n                                               }) => {\r\n    return <div className={style.users}>\r\n                        <span>\r\n                        <div>\r\n                            <NavLink to={\"/profile/\" + user.id}>\r\n                                <img src={user.photos.small !== null ? user.photos.small : avatar} alt='user'/>\r\n                            </NavLink>\r\n                        </div>\r\n                        <div>\r\n                    {user.followed\r\n                        ? <button disabled={followingInProgress.some((id: number) => id === user.id)}\r\n                                  onClick={() => unfollow(user.id)}>unfollow</button>\r\n                        : <button disabled={followingInProgress.some((id: number) => id === user.id)}\r\n                                  onClick={() => follow(user.id)}>follow</button>\r\n                    }\r\n                        </div>\r\n                        </span>\r\n        <span>\r\n                        <span>\r\n                        <div>{user.name}</div>\r\n                        <div>{user.status}</div>\r\n                        </span>\r\n                        <span className={style.span}>\r\n                        <div>{'user.location.country'}</div>\r\n                        <div>{'user.location.city'}</div>\r\n                        </span>\r\n                        </span>\r\n    </div>\r\n}\r\n\r\n","import React from 'react';\r\nimport {InitialStateType, UserType} from \"../../redux/users-reducer\";\r\nimport {Paginator} from \"../common/paginator/Paginator\";\r\nimport {User} from \"./User\";\r\n\r\ntype UsersPropsType = {\r\n    totalUsersCount: number\r\n    pageSize: number\r\n    currentPage: number\r\n    setCurrentPage: (page: number) => void\r\n    usersPage: InitialStateType\r\n    follow: (userId: number) => void\r\n    unfollow: (userId: number) => void\r\n    followingInProgress: Array<number>\r\n}\r\n\r\nexport const Users: React.FC<UsersPropsType> = ({\r\n                                                    currentPage,\r\n                                                    setCurrentPage,\r\n                                                    pageSize,\r\n                                                    totalUsersCount,\r\n                                                    usersPage,\r\n                                                    followingInProgress,\r\n                                                    follow,\r\n                                                    unfollow,\r\n                                                }) => {\r\n    return (\r\n        <div>\r\n            <Paginator currentPage={currentPage} pageSize={pageSize} setCurrentPage={setCurrentPage}\r\n                       totalItemsCount={totalUsersCount}/>\r\n            {usersPage.users.map((user: UserType) => <User key={user.id}\r\n                                                           user={user}\r\n                                                           follow={follow}\r\n                                                           followingInProgress={followingInProgress}\r\n                                                           unfollow={unfollow}/>\r\n            )}\r\n        </div>\r\n    );\r\n}\r\n\r\n","import {AppRootStateType} from \"./store\";\r\n\r\nexport const getUsers = (state: AppRootStateType) => {\r\n    return state.usersPage\r\n}\r\n// export const getUsers = createSelector(getUsersSelector, (users) => {\r\n//     return users.filter((user: UserType) => true)\r\n// })\r\nexport const getPageSize = (state: AppRootStateType) => {\r\n    return state.usersPage.pageSize\r\n}\r\nexport const getTotalUserCount = (state: AppRootStateType) => {\r\n    return state.usersPage.totalUsersCount\r\n}\r\nexport const getIsFetching = (state: AppRootStateType) => {\r\n    return state.usersPage.isFetching\r\n}\r\nexport const getCurrentPage = (state: AppRootStateType) => {\r\n    return state.usersPage.currentPage\r\n}\r\n\r\nexport const getFollowingInProgress = (state: AppRootStateType) => {\r\n    return state.usersPage.followingInProgress\r\n}\r\n","import React from 'react';\r\nimport {connect} from \"react-redux\";\r\nimport {follow, requestUsers, setCurrentPage, toggleIsFollowingProgress, unfollow,} from \"../../redux/users-reducer\";\r\nimport {AppRootStateType} from \"../../redux/store\";\r\nimport {Users} from \"./Users\";\r\nimport {compose} from \"redux\";\r\nimport {Preloader} from \"../common/preloader/Preloader\";\r\nimport {\r\n    getCurrentPage,\r\n    getFollowingInProgress,\r\n    getIsFetching,\r\n    getPageSize,\r\n    getTotalUserCount,\r\n    getUsers\r\n} from \"../../redux/users-selectors\";\r\n\r\n\r\nclass UsersContainer extends React.Component<any, any> {\r\n\r\n    componentDidMount() {\r\n        const {requestUsers, currentPage, pageSize} = this.props\r\n        requestUsers(currentPage, pageSize)\r\n    }\r\n\r\n    setCurrentPage = (currentPage: number) => {\r\n        const {requestUsers, pageSize} = this.props\r\n        requestUsers(currentPage, pageSize)\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <>\r\n                {this.props.isFetching ? <Preloader/> : null}\r\n                <Users totalUsersCount={this.props.totalUsersCount}\r\n                       pageSize={this.props.pageSize}\r\n                       currentPage={this.props.currentPage}\r\n                       setCurrentPage={this.setCurrentPage}\r\n                       usersPage={this.props.usersPage}\r\n                       follow={this.props.follow}\r\n                       unfollow={this.props.unfollow}\r\n                       followingInProgress={this.props.followingInProgress}\r\n                />\r\n            </>\r\n        );\r\n    }\r\n}\r\n\r\n\r\nlet mapStateToProps = (state: AppRootStateType) => {\r\n    return {\r\n        usersPage: getUsers(state),\r\n        pageSize: getPageSize(state),\r\n        totalUsersCount: getTotalUserCount(state),\r\n        currentPage: getCurrentPage(state),\r\n        isFetching: getIsFetching(state),\r\n        followingInProgress: getFollowingInProgress(state)\r\n    }\r\n}\r\nexport default compose<React.ComponentType>(\r\n    connect(mapStateToProps, {\r\n        follow, unfollow, setCurrentPage, toggleIsFollowingProgress, requestUsers\r\n    }),\r\n)(UsersContainer)"],"names":["Paginator","totalItemsCount","setCurrentPage","pageSize","currentPage","pagesCount","Math","ceil","pages","i","push","portionCount","useState","portionNumber","setPortionNumber","leftPortionPageNumber","rightPortionPageNumber","onClick","filter","page","map","className","style","event","User","user","followingInProgress","follow","unfollow","to","id","src","photos","small","avatar","alt","followed","disabled","some","name","status","Users","totalUsersCount","usersPage","users","getUsers","state","getPageSize","getTotalUserCount","getIsFetching","isFetching","getCurrentPage","getFollowingInProgress","UsersContainer","props","requestUsers","this","Preloader","React","compose","connect","toggleIsFollowingProgress"],"sourceRoot":""}